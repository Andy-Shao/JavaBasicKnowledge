The Java platform contains several classes for use with JAR files. Some of these APIs are:
    * The java.util.jar package
    * The java.net.JarURLConnection class
    * The java.net.URLClassLoader class
To give you an idea of the possibilities that are opened up by these new APIs, this lesson guides you through the 
inner working of a sample application called JarRunner.

#An Example - The JarRunner Application
JarRunner enables you to run an application that's bundled in a JAR file by specifying the JAR file's URL on the 
command line. For example, if an application called TargetApp were bundled in a JAR file at
http://www.example.com/TargetApp.jar, you could run the application using this command:
    java JarRunner http://www.example.com/TargetApp.jar

In order for JarRunner to work, it must be able to perform the following tasks, all of which are accomplished by using 
the new APIs:
    * Access the remote JAR file and establish a communications link with it.
    * Inspect the JAR file's manifest to see which of the classes in the archive is the main class.
    * Load the classes in the JAR file.

The JarRunner application consists of two classes, JarRunner and JarClassLoader. JarRunner delegates most of the 
JAR-handling tasks to the JarClassLoader class. JarClassLoader extends the java.net.URLClassLoader class. You can 
browse the source code for the JarRunner and JarClassLoader classes before proceeding with the lesson:
    * JarRunner.java
    * JarClassLoader.java
This lesson has two parts:

#The JarClassLoader Class
This section shows you how JarClassLoader uses some of the new APIs to perform tasks required for the JarRunner
application to work.

#The JarRunner Class
This section summarizes the JarRunner class that comprises the JarRunner application.

#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/apiindex.html
#DATE: 2014-08-26



##The JarClassLoader Class
The JarClassLoader class extends java.net.URLClassLoader. As its name implies, URLClassLoader is designed to be 
used for loading classes and resources that are accessed by searching a set of URLs. The URLs can refer either to 
directories or to JAR files.

In addition to subclassing URLClassLoader, JarClassLoader also makes use of features in two other new JAR-related 
APIs, the java.util.jar package and the java.net.JarURLConnection class. In this section, we'll look in detail at the 
constructor and two methods of JarClassLoader.

#The JarClassLoader Constructor
The constructor takes an instance of java.net.URL as an argument. The URL passed to this constructor will be used 
elsewhere in JarClassLoader to find the JAR file from which classes are to be loaded.
public JarClassLoader(URL url) {
    super(new URL[] { url });
    this.url = url;
}
The URL object is passed to the constructor of the superclass, URLClassLoader, which takes a URL[] array, rather than a 
single URL instance, as an argument.

#The getMainClassName Method
Once a JarClassLoader object is constructed with the URL of a JAR-bundled application, it's going to need a way to 
determine which class in the JAR file is the application's entry point. That's the job of the getMainClassName method:
public String getMainClassName() throws IOException {
    URL u = new URL("jar", "", url + "!/");
    JarURLConnection uc = (JarURLConnection)u.openConnection();
    Attributes attr = uc.getMainAttributes();
    return attr != null
                   ? attr.getValue(Attributes.Name.MAIN_CLASS)
                   : null;
}
You may recall from a previous lesson that a JAR-bundled application's entry point is specified by the Main-Class
header of the JAR file's manifest. To understand how getMainClassName accesses the Main-Class header value, let's 
look at the method in detail, paying special attention to the new JAR-handling features that it uses:

#The JarURLConnection class and JAR URLs
The getMainClassName method uses the JAR URL format specified by the java.net.JarURLConnection class. The syntax 
for the URL of a JAR file is as in this example:
    jar:http://www.example.com/jarfile.jar!/
The terminating !/ separator indicates that the URL refers to an entire JAR file. Anything following the separator refers 
to specific JAR-file contents, as in this example:
    jar:http://www.example.com/jarfile.jar!/mypackage/myclass.class
The first line in the getMainClassName method is:
    URL u = new URL("jar", "", url + "!/");
This statement constructs a new URL object representing a JAR URL, appending the !/ separator to the URL that was 
used in creating the JarClassLoader instance.

#The java.net.JarURLConnection class
This class represents a communications link between an application and a JAR file. It has methods for accessing the 
JAR file's manifest. The second line of getMainClassName is:
    JarURLConnection uc = (JarURLConnection)u.openConnection();
In this statement, URL instance created in the first line opens a URLConnection. The URLConnection instance is then cast 
to JarURLConnection so it can take advantage of JarURLConnection's JAR-handling features.

#Fetching Manifest Attributes: java.util.jar.Attributes
With a JarURLConnection open to a JAR file, you can access the header information in the JAR file's manifest by using 
the getMainAttributes method of JarURLConnection. This method returns an instance of java.util.jar.Attributes, a 
class that maps header names in JAR-file manifests with their associated string values. The third line in
getMainClassName creates an Attributes object:
    Attributes attr = uc.getMainAttributes();
To get the value of the manifest's Main-Class header, the fourth line of getMainClassName invokes the
Attributes.getValue method:
    return attr != null
               ? attr.getValue(Attributes.Name.MAIN_CLASS)
               : null;
The method's argument, Attributes.Name.MAIN_CLASS, specifies that it's the value of the Main-Class header that you 
want. (The Attributes.Name class also provides static fields such as MANIFEST_VERSION, CLASS_PATH, and SEALED for 
specifying other standard manifest headers.)

#The invokeClass Method
We've seen how JarURLClassLoader can identify the main class in a JAR-bundled application. The last method to 
consider, JarURLClassLoader.invokeClass, enables that main class to be invoked to launch the JAR-bundled 
application:
public void invokeClass(String name, String[] args)
    throws ClassNotFoundException,
           NoSuchMethodException,
           InvocationTargetException
{
    Class c = loadClass(name);
    Method m = c.getMethod("main", new Class[] { args.getClass() });
    m.setAccessible(true);
    int mods = m.getModifiers();
    if (m.getReturnType() != void.class || !Modifier.isStatic(mods) ||
        !Modifier.isPublic(mods)) {
        throw new NoSuchMethodException("main");
    }
    try {
        m.invoke(null, new Object[] { args });
    } catch (IllegalAccessException e) {
        // This should not happen, as we have disabled access checks
    }
}

The invokeClass method takes two arguments: the name of the application's entry-point class and an array of string 
arguments to pass to the entry-point class's main method. First, the main class is loaded:
    Class c = loadClass(name);
The loadClass method is inherited from java.lang.ClassLoader.

Once the main class is loaded, the reflection API of the java.lang.reflect package is used to pass the arguments to 
the class and launch it. You can refer to the tutorial on The Reflection API for a review of reflection.

#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/apiindex.html
#DATE: 2014-08-26


##The JarRunner Class
The JarRunner application is launched with a command of this form:
    java JarRunner url [arguments]
In the previous section, we've seen how JarClassLoader is able to identify and load the main class of a JAR-bundled 
application from a given URL. To complete the JarRunner application, therefore, we need to be able to take a URL and 
any arguments from the command line, and pass them to an instance of JarClassLoader. These tasks belong to the
JarRunner class, the entry point of the JarRunner application.

It begins by creating a java.net.URL object from the URL specified on the command line:
public static void main(String[] args) {
    if (args.length < 1) {
        usage();
    }
    URL url = null;
    try {
        url = new URL(args[0]);
    } catch (MalformedURLException e) {
        fatal("Invalid URL: " + args[0]);
    }
}
If args.length < 1, that means no URL was specified on the command line, so a usage message is printed. If the first 
command-line argument is a good URL, a new URL object is created to represent it.

Next, JarRunner creates a new instance of JarClassLoader, passing to the constructor the URL that was specified on 
the command-line:
    JarClassLoader cl = new JarClassLoader(url);
As we saw in the previous section, it's through JarClassLoader that JarRunner taps into the JAR-handling APIs.

The URL that's passed to the JarClassLoader constructor is the URL of the JAR-bundled application that you want to 
run. JarRunner next calls the class loader's getMainClassName method to identify the entry-point class for the 
application:
String name = null;
try {
    name = cl.getMainClassName();
} catch (IOException e) {
    System.err.println("I/O error while loading JAR file:");
    e.printStackTrace();
    System.exit(1);
}
if (name == null) {
    fatal("Specified jar file does not contain a 'Main-Class'" +
          " manifest attribute");
}
The key statement is highlighted in bold. The other statements are for error handling.

Once JarRunner has identified the application's entry-point class, only two steps remain: passing any arguments to 
the application and actually launching the application. JarRunner performs these steps with this code:
// Get arguments for the application
String[] newArgs = new String[args.length - 1];
System.arraycopy(args, 1, newArgs, 0, newArgs.length);
// Invoke application's main class
try {
    cl.invokeClass(name, newArgs);
} catch (ClassNotFoundException e) {
    fatal("Class not found: " + name);
} catch (NoSuchMethodException e) {
    fatal("Class does not define a 'main' method: " + name);
} catch (InvocationTargetException e) {
    e.getTargetException().printStackTrace();
    System.exit(1);
}

Recall that the first command-line argument was the URL of the JAR-bundled application. Any arguments to be 
passed to that application are therefore in element 1 and beyond in the args array. JarRunner takes those elements, 
and creates a new array called newArgs to pass to the application (bold line above). JarRunner then passes the entry-
point's class name and the new argument list to the invokeClass method of JarClassLoader. As we saw in the previous 
section, invokeClass will load the application's entry-point class, pass it any arguments, and launch the application.

#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/jarrunner.html
#DATE: 2014-08-26