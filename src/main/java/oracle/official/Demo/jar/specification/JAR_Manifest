#Overview

A JAR file manifest consists of a main section followed by a list of sections for individual JAR file entries, each separated by a 
newline. Both the main section and individual sections follow the section syntax specified above. They each have their own 
specific restrictions and rules.
The main section contains security and configuration information about the JAR file itself, as well as the application or 
extension that this JAR file is a part of. It also defines main attributes that apply to every individual manifest entry.  No 
attribute in this section can have its name equal to  "Name". This section is terminated by an empty line.

The individual sections define various attributes for packages or files contained in this JAR file. Not all files in the JAR file 
need to be listed in the manifest as entries, but all files which are to be signed must be listed. The manifest file itself must 
not be listed.  Each section must start with an attribute with the name as "Name", and the value must be a relative path to the 
file, or an absolute URL referencing data outside the archive.

If there are multiple individual sections for the same file entry, the attributes in these sections are merged. If a certain 
attribute have different values in different sections, the last one is recognized.

Attributes which are not understood are ignored. Such attributes may include implementation specific information used by 
applications.

--

#Manifest Specification:

  manifest-file:                    main-section newline *individual-section
  main-section:                    version-info newline *main-attribute
  version-info:                      Manifest-Version : version-number
  version-number :               digit+{.digit+}*
  main-attribute:                 (any legitimate main attribute) newline
  individual-section:             Name : value newline *perentry-attribute
  perentry-attribute:            (any legitimate perentry attribute) newline
  newline :                            CR LF | LF | CR (not followed by LF)
   digit:                                {0-9} 
In the above specification, attributes that can appear in the main section are referred to as main attributes, whereas attributes 
that can appear in individual sections are referred to as per-entry attributes. Certain attributes can appear both in the main 
section and the individual sections, in which case the per-entry attribute value overrides the main attribute value for the 
specified entry. The two types of attributes are defined as follows.

--

#Main Attributes

Main attributes are the attributes that are present in the main section of the manifest. They fall into the following different 
groups:
* general main attributes
    * Manifest-Version: Defines the manifest file version. The value is a legitimate version number, as described in the above 
    spec.
    * Created-By: Defines the version and the vendor of the java implementation on top of which this manifest file is generated. 
    This attribute is generated by the jar tool.
    * Signature-Version: Defines the signature version of the jar file. The value should be a valid version-number string.
    * Class-Path: The value of this attribute specifies the relative URLs of the extensions or libraries that this application or 
    extension needs. URLs are separated by one or more spaces. The application or extension class loader uses the value of this 
    attribute to construct its internal search path.
* attribute defined for stand-alone applications: This attribute is used by stand-alone applications that are bundled into 
executable jar files which can be invoked by the java runtime directly by running "java -jar x.jar".
    * Main-Class: The value of this attribute is the class name of the main application class which the launcher will load at 
    startup time. The value must not have the .class extension appended to the class name.
* attributes defined for applets: These attributes are used by an applet which is bundled into JAR files to define requirements, 
version and location information for the extensions which this applet depends on. (see Extension Versioning ).
    * Extension-List: This attribute indicates the extensions that are needed by the applet. Each extension listed in this 
    attribute will have a set of additional attributes that the applet uses to specify which version and vendor of the extension 
    it requires.
    * <extension>-Extension-Name: This attribute is the unique name of the extension. The Java Plug-in will compare the value of 
    this attribute with the Extension-Name attribute in the manifests of installed extensions to determine if the extension is 
    installed.
    * <extension>-Specification-Version: This attribute specifies the minimum extension specification version that is required by 
    the applet. The Java Plug-in will compare the value of this attribute with the Specification-Version attribute of the 
    installed extension to determine if the extension is up to date.
    * <extension>-Implementation-Version: This attritute specifies the minimum extension implementation version number that is 
    required by the applet. The Java Plug-in will compare the value of this attribute with the Implementation-Version attribute of 
    the installed extension to see if a more recent implementation needs to be downloaded.
    * <extension>-Implementation-Vendor-Id: This attribute can be used to identify the vendor of an extension implementation if 
    the applet requires an implementation from a specific vendor. The Java Plug-in will compare the value of this attribute with 
    the Implementation-Vendor-Id attribute of the installed extension.
    * <extension>-Implementation-URL: This attribute specifies a URL that can be used to obtain the most recent version of the 
    extension if the required version is not already installed.
* attribute defined for extension identification: This attribute is used by extensions to define their unique identity.
    * Extension-Name: This attribute specifies a name for the extension contained in the Jar file. The name should be a unique 
    identifier such as the name of the main package comprising the extension.
* attributes defined for extension and  package versioning  and sealing information: These attributes define features of the 
extension which the JAR file is a part of. The value of these attributes apply to all the packages in the JAR file, but can be 
overridden by per-entry attributes.
    * Implementation-Title: The value is a string that defines the title of the extension implementation.
    * Implementation-Version: The value is a string that defines the version of the extension implementation.
    * Implementation-Vendor: The value is a string that defines the organization that maintains the extension implementation.
    * Implementation-Vendor-Id: The value is a string id that uniquely defines the organization that maintains the  extension 
    implementation.
    * Implementation-URL: This attribute defines the URL from which the extension implementation can be downloaded from.
    * Specification-Title: The value is a string that defines the title of the extension specification.
    * Specification-Version: The value is a string that defines the version of the extension specification.
    * Specification-Vendor: The value is a string that defines the organization that maintains the extension specification.
    * Sealed: This attribute defines whether this JAR file is sealed or not. The value can be either "true" or "false", case is 
    ignored. If it is set to "true", then all the packages in the JAR file are defaulted to be sealed, unless they are defined 
    otherwise individually.

--

#Per-Entry Attributes

Per-entry attributes apply only to the individual JAR file entry to which the manifest entry is associated with.  If the same 
attribute also appeared in the main section, then the value of the per-entry attribute overwrites the main attribute's value. For 
example, if JAR file a.jar has the following manifest content:
    Manifest-Version: 1.0
    Created-By: 1.2 (Sun Microsystems Inc.)
    Sealed: true
    Name: foo/bar/
    Sealed: false
It means that all the packages archived in a.jar are sealed, except that package foo.bar is not.

The per-entry attributes fall into the following groups:

* attributes defined for file contents:
    * Content-Type: This attribute can be used to specify the MIME type and subtype of data for a specific file entry in the JAR 
    file. The value should be a string in the form of type/subtype. For example "image/bmp" is an image type with a subtype of bmp
    (representing bitmap). This would indicate the file entry as an image with the data stored as a bitmap. RFC 1521 and 1522 
    discuss and define the MIME types definition.
* attributes defined for package versioning and sealing information: These are the same set of attributes defined above as main 
attributes that defines the extension package versioning and sealing information. When used as per-entry attributes, these 
attributes overwrites the main attributes but only apply to the individual file specified by the manifest entry.
* attribute defined for beans objects:
    * Java-Bean: Defines whether the specific jar file entry is a Java Beans object or not. The value should be either "true" or 
    "false", case is ignored.
* attributes defined for signing: These attributes are used for signing and verifying purposes. More details here.
    * x-Digest-y: The name of this attribute specifies the name of the digest algorithm used to compute the digest value for the 
    corresponding jar file entry. The value of this attribute stores the actual digest value. The prefix 'x' specifies the 
    algorithm name and the optional suffix 'y'  indicates to which language the digest value should be verified against.
    * Magic: This is an optional attribute that can be used by applications to indicate how verifier should compute the digest 
    value contained in the manifest entry.  The value of this attribute is a set of comma separated context specific strings. '
    Detailed description is here.