##Signing and Verifying JAR Files
You can optionally sign a JAR file with your electronic "signature." Users who verify your signature can grant your 
JAR-bundled software security privileges that it wouldn't ordinarily have. Conversely, you can verify the signatures of 
signed JAR files that you want to use.

This lesson shows you how to use the tools provided in the JDK to sign and verify JAR files:

#Understanding Signing and Verification
If you're not familiar with the concepts of signing and verification, this section will help to bring you up to speed. It 
contains definitions of the relevant terms, explanations of some of the benefits provided by signing, and an outline of 
the signing mechanism used by the Java platform as it relates to JAR files.

#Signing JAR Files
In this section, you'll learn how to use the JDK™ tools to digitally sign your JAR files.

#Verifying Signed JAR Files
This section shows you how to use the JDK tool set to verify to digitally sign your JAR files. 

#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/signindex.html
#DATE: 2014-08-25



##Understanding Signing and Verification
The Java™ platform enables you to digitally sign JAR files. You digitally sign a file for the same reason you might sign 
a paper document with pen and ink -- to let readers know that you wrote the document, or at least that the document 
has your approval.

When you sign a letter, for example, everyone who recognizes your signature can confirm that you wrote the letter. 
Similarly when you digitally sign a file, anyone who "recognizes" your digital signature knows that the file came from 
you. The process of "recognizing" electronic signatures is called verification.

When the JAR file is signed, you also have the option of time stamping the signature. Similar to putting a date on a 
paper document, time stamping the signature identifies when the JAR file was signed. The time stamp can be used to 
verify that the certificate used to sign the JAR file was valid at the time of signing.

The ability to sign and verify files is an important part of the Java platform's security architecture. Security is controlled 
by the security policy that's in force at runtime. You can configure the policy to grant security privileges to applets and 
to applications. For example, you could grant permission to an applet to perform normally forbidden operations such 
as reading and writing local files or running local executable programs. If you have downloaded some code that's 
signed by a trusted entity, you can use that fact as a criterion in deciding which security permissions to assign to the 
code.

Once you (or your browser) have verified that an applet is from a trusted source, you can have the platform relax 
security restrictions to let the applet perform operations that would ordinarily be forbidden. A trusted applet can have 
freedoms as specified by the policy file in force.

The Java platform enables signing and verification by using special numbers called public and private keys. Public 
keys and private keys come in pairs, and they play complementary roles.

The private key is the electronic "pen" with which you can sign a file. As its name implies, your private key is known 
only to you so that no one else can "forge" your signature. A file signed with your private key can be verified only by 
the corresponding public key.

Public and private keys alone, however, aren't enough to truly verify a signature. Even if you've verified that a signed file 
contains a matching key pair, you still need some way to confirm that the public key actually comes from the signer 
that it purports to come from.

One more element, therefore, is required to make signing and verification work. That additional element is the
certificate that the signer includes in a signed JAR file. A certificate is a digitally signed statement from a recognized
certification authority that indicates who owns a particular public key. Certification authorities are entities (typically 
firms specializing in digital security) that are trusted throughout the industry to sign and issue certificates for keys and 
their owners. In the case of signed JAR files, the certificate indicates who owns the public key contained in the JAR 
file.

When you sign a JAR file your public key is placed inside the archive along with an associated certificate so that it's 
easily available for use by anyone wanting to verify your signature.

To summarize digital signing:
    * The signer signs the JAR file using a private key.
    * The corresponding public key is placed in the JAR file, together with its certificate, so that it is available for use 
      by anyone who wants to verify the signature.
      
#Digests and the Signature File
When you sign a JAR file, each file in the archive is given a digest entry in the archive's manifest. Here's an example 
of what such an entry might look like:
    Name: test/classes/ClassOne.class
    SHA1-Digest: TD1GZt8G11dXY2p4olSZPc5Rj64=
    
The digest values are hashes or encoded representations of the contents of the files as they were at the time of 
signing. A file's digest will change if and only if the file itself changes.

When a JAR file is signed, a signature file is automatically generated and placed in the JAR file's META-INF directory, 
the same directory that contains the archive's manifest. Signature files have filenames with an .SF extension. Here is 
an example of the contents of a signature file:

    Signature-Version: 1.0
    SHA1-Digest-Manifest: h1yS+K9T7DyHtZrtI+LxvgqaMYM=
    Created-By: 1.7.0_06 (Oracle Corporation)

    Name: test/classes/ClassOne.class
    SHA1-Digest: fcav7ShIG6i86xPepmitOVo4vWY=

    Name: test/classes/ClassTwo.class
    SHA1-Digest: xrQem9snnPhLySDiZyclMlsFdtM=

    Name: test/images/ImageOne.gif
    SHA1-Digest: kdHbE7kL9ZHLgK7akHttYV4XIa0=

    Name: test/images/ImageTwo.gif
    SHA1-Digest: mF0D5zpk68R4oaxEqoS9Q7nhm60=
    
As you can see, the signature file contains digest entries for the archive's files that look similar to the digest-value 
entries in the manifest. However, while the digest values in the manifest are computed from the files themselves, the 
digest values in the signature file are computed from the corresponding entries in the manifest. Signature files also 
contain a digest value for the entire manifest (see the SHA1-Digest-Manifest header in the above example).

When a signed JAR file is being verified, the digests of each of its files are re-computed and compared with the 
digests recorded in the manifest to ensure that the contents of the JAR file haven't changed since it was signed. As 
an additional check, digest values for the manifest file itself are re-computed and compared against the values 
recorded in the signature file.

You can read additional information about signature files on the Manifest Format page of the JDK™ documentation.

#The Signature Block File
In addition to the signature file, a signature block file is automatically placed in the META-INF directory when a JAR file 
is signed. Unlike the manifest file or the signature file, signature block files are not human-readable.

The signature block file contains two elements essential for verification:
    * The digital signature for the JAR file that was generated with the signer's private key
    * The certificate containing the signer's public key, to be used by anyone wanting to verify the signed JAR file
Signature block filenames typically will have a .DSA extension indicating that they were created by the default Digital 
Signature Algorithm. Other filename extensions are possible if keys associated with some other standard algorithm 
are used for signing.

#Related Documentation
For additional information about keys, certificates, and certification authorities, see
    * The JDK Security Tools
    * X.509 Certificates
For more information about the Java platform's security architecture, see this related documentation:
    * Security Features in Java SE
    * Java SE Security
    * Security Tools
    
#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/intro.html
#DATE: 2014-08-25


##Signing JAR Files
You use the JAR Signing and Verification Tool to sign JAR files and time stamp the signature. You invoke the JAR 
Signing and Verification Tool by using the jarsigner command, so we'll refer to it as "Jarsigner" for short.

To sign a JAR file, you must first have a private key. Private keys and their associated public-key certificates are 
stored in password-protected databases called keystores. A keystore can hold the keys of many potential signers. 
Each key in the keystore can be identified by an alias which is typically the name of the signer who owns the key. 
The key belonging to Rita Jones might have the alias "rita", for example.

The basic form of the command for signing a JAR file is
    jarsigner jar-file alias
In this command:
    * jar-file is the pathname of the JAR file that's to be signed.
    * alias is the alias identifying the private key that's to be used to sign the JAR file, and the key's associated
      certificate.

The Jarsigner tool will prompt you for the passwords for the keystore and alias.

This basic form of the command assumes that the keystore to be used is in a file named .keystore in your home 
directory. It will create signature and signature block files with names x.SF and x.DSA respectively, where x is the first
eight letters of the alias, all converted to upper case. This basic command will overwrite the original JAR file with the
signed JAR file.

In practice, you might want to use one or more of the command options that are available. For example, time 
stamping the signature is encouraged so that any tool used to deploy your application can verify that the certificate 
used to sign the JAR file was valid at the time that the file was signed. A warning is issued by the Jarsigner tool if a 
time stamp is not included.

Options precede the jar-file pathname. The following table describes the options that are available:
           Jarsigner Command Options
Option                                  Description
-keystore url                       Specifies a keystore to be used if you don't want to use the .keystore default database.
-storepass password                 Allows you to enter the keystore's password on the command line rather than be prompted 
                                    for it.
-keypass password                   Allows you to enter your alias's password on the command line rather than be prompted for 
                                    it.
-sigfile file                       Specifies the base name for the .SF and .DSA files if you don't want the base name to be 
                                    taken from your alias. file must be composed only of upper case letters (A-Z), numerals 
                                    (0-9), hyphen (-), and underscore (_).
-signedjar file                     Specifies the name of the signed JAR file to be generated if you don't want the original 
                                    unsigned file to be overwritten with the signed file.
-tsa url                            Generates a time stamp for the signature using the Time Stamping Authority (TSA) 
                                    identified by the URL.
-tsacert alias                      Generates a time stamp for the signature using the TSA's public key certificate identified
                                    by alias.
-altsigner class                    Indicates that an alternative signing mechanism be used to time stamp the signature. The 
                                    fully-qualified class name identifies the class used.
-altsignerpath classpathlist        Provides the path to the class identified by the altsigner option and any JAR files that 
                                    the class depends on.
                                    
#Example
Let's look at a couple of examples of signing a JAR file with the Jarsigner tool. In these examples we will assume:
    * your alias is "johndoe"
    * the keystore you want to use is in a file named "mykeys" in the current working directory.
    * the keystore's password is "abc123"
    * the TSA that you want to use to time stamp the signature is located at http://example.tsa.url
Under these assumptions, you could use this command to sign a JAR file named app.jar:
    jarsigner -keystore mykeys -storepass abc123 -tsa http://example.tsa.url app.jar johndoe

You will be prompted for the keystore password. Because this command doesn't make use of the -sigfile option, the
.SF and .DSA files it creates would be named JOHNDOE.SF and JOHNDOE.DSA. Because the command doesn't use the 
-singnedjar option, the resulting signed file will overwrite the original version of app.jar.

Let's look at what would happen if you used a different combination of options:
    jarsigner -keystore mykeys -sigfile SIG -signedjar SignedApp.jar 
          -tsacert testalias app.jar johndoe
          
This time, you would be prompted to enter the passwords for both the keystore and your alias because the passwords
aren't specified on the command line. The signature and signature block files would be named SIG.SF and SIG.DSA,
respectively, and the signed JAR file SignedApp.jar would be placed in the current directory. The original unsigned JAR
file would remain unchanged. Also, the signature would be time stamped with the TSA's public key certificate 
identified as testalias.

#Additional Information
Complete reference pages for the JAR Signing and Verification Tool are on-line: Summary of Security Tools
--
Note: When a certificate is self signed, UNKNOWN will be displayed as the publisher of the application. For 
more information, see Is it safe to run an application from a publisher that is listed as UNKNOWN?.
--

#This document copy from Oracle!!
#COPY FROM http://docs.oracle.com/javase/tutorial/deployment/jar/signing.html
#DATE: 2014-08-25